<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE mapper PUBLIC
"-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="talkMapper">
<!-- 찜 Mapper -->
	
	<select id="getTalkChat" parameterType="Talk" resultType="Chat">
		select * from chat
		where ((C_FROM_UNO = #{t_from_uno} and C_TO_UNO = #{t_to_uno})
		or (C_FROM_UNO = #{t_to_uno} and C_TO_UNO = #{t_from_uno}))
	</select>	
	
	<insert id="insertChat" parameterType="hashmap">
		MERGE INTO chat
   		USING DUAL
       	ON ((C_FROM_UNO = #{t_from_uno} and C_TO_UNO = #{t_to_uno})
		or (C_FROM_UNO = #{t_to_uno} and C_TO_UNO = #{t_from_uno}))
    	WHEN NOT MATCHED THEN
       	insert (C_NO, C_FROM_UNO, C_TO_UNO, C_MISSION, C_READC, C_NREADC) 
       	values(
		to_char(SEQ_C_NO.nextval),
		(select u_no from users where u_no = #{t_from_uno}),
		(select u_no from users where u_no = #{t_to_uno}),
		#{c_mission},
		null,	
		null)
	</insert>

	<select id="getPatnerInfo" parameterType="String" resultType="TalkPartner">
		select u.u_no as p_no, u.u_name as p_name, u.u_profile as p_profileImg,
			TRUNC(MONTHS_BETWEEN(SYSDATE, TO_DATE(p.u_birth, 'RR/MM/DD'))/12) as p_age,
			p.u_job as p_job, p.u_shcool as p_sch, p.u_loc as p_loc , f.f_img as p_feed
		from users u
		join primaryinfo p on (u.u_no = p.u_no)
		left join (select *
			from feed 
			where f_no = (select max(f_no) from feed where u_no = #{receiver})) f 
			on (u.u_no = f.u_no)
		where u.u_no = #{receiver}
		
		
		<!-- select u.u_no as p_no, u.u_name as p_name, u.u_profile as p_profileImg,
			TRUNC(MONTHS_BETWEEN(SYSDATE, TO_DATE(p.u_birth, 'RR/MM/DD'))/12) as p_age,
			p.u_job as p_job, p.u_shcool as p_sch, p.u_loc as p_loc, f.f_img as p_feed
		from users u
		join primaryinfo p on (u.u_no = p.u_no)
		join (select *
			from feed 
			where f_no = (select max(f_no) from feed where u_no = #{receiver})) f 
			on (u.u_no = f.u_no) -->
	</select>

	<select id="chatListMethod" parameterType="hashMap" resultType="TalkChat">
		<![CDATA[
		select *	
		from (select  rownum rum, al.*
			from (select c.c_no as c_no, t.t_no as t_no,
				t.t_con as t_con, t.t_date as t_date , t.t_read as t_read,
				t.t_from_uno as t_from_uno,	 t.t_to_uno as t_to_uno,
				c.c_from_uno as c_from_uno,	 c.c_to_uno as c_to_uno, c.c_mission as c_mission,
				c.c_readc as c_readc, c.c_nreadc as c_nreadc, null as t_profile
				from talk t
				join chat c on c.c_no = t.c_no
				where (t.t_from_uno = #{loginNo}
				or t.t_to_uno = #{loginNo})
				order by t.t_date desc
				) al
			where (t_no in (select max(t_no) as max_t
			from talk 
			group by c_no)))
		where rum >= #{startRow} and rum <= #{endRow}
		order by rum
		]]>
	</select>
	
	<select id="userMissionList" parameterType="hashMap" resultType="TalkMission">
		<![CDATA[
		select *
		from (select rownum rnum, al.*
			 from (select m_no, c_no, c_from_uno, c_to_uno, (u.u_name) as p_name,
						c_mission, m_con, m_sta, m_date, count(*)over() as listcount 
				  from mission m, users u
				  where (c_from_uno = #{loginNo} or c_to_uno = #{loginNo})
				  and (decode(c_from_uno, #{loginNo}, c_to_uno, c_from_uno) = u_no) 
				  order by m_no desc) al) 
		where rnum >= #{startRow} and rnum <= #{endRow}
		order by rnum 
		]]>
	</select>
	
		<!-- 		sselect *
		from (select rownum rnum, m_no, c_no, c_from_uno, c_to_uno, 
				(u.u_name) as p_name, c_mission, m_con, m_sta, m_date, 
				count(*)over() as listcount 
			from mission m, users u
			where (c_from_uno = #{loginNo} or c_to_uno = #{loginNo})
			and (decode(c_from_uno, #{loginNo}, c_to_uno, c_from_uno) = u_no) 
			order by m_no)
		where rnum >= #{startRow} and rnum <= #{endRow}
		order by rnum -->
	<select id="userMSearchList" parameterType="hashMap" resultType="TalkMission">
		<bind name="keyword" value="'%'+keyword+'%'"/>
	
		<![CDATA[
		select *
		from (select rownum rnum, al.*
			 from (select m_no, c_no, c_from_uno, c_to_uno, (u.u_name) as p_name,
						c_mission, m_con, m_sta, m_date, count(*)over() as listcount 
				  from mission m, users u
				  where (c_from_uno = #{loginNo} or c_to_uno = #{loginNo})
				  and (decode(c_from_uno, #{loginNo}, c_to_uno, c_from_uno) = u_no) 
				  and ${type} like #{keyword}
				  order by m_no desc) al) 
		where rnum >= #{startRow} and rnum <= #{endRow}
		order by rnum 
		]]>	
	</select>	
	<!-- and u.u_name like '%지수%'	 -->
		
		
		
</mapper>
